" Compatibility
set nocompatible

" Filetypes
filetype off

" Backups {{{
    set backup                        " enable backups
    set noswapfile                    " it's 2013, Vim.

    set backupdir=~/.vim/tmp/backup// " backups
    set directory=~/.vim/tmp/swap//   " swap files

    if has('persistent_undo')
        set undodir=~/.vim/tmp/undo//     " undo files


        " Make those folders automatically if they don't already exist.
        if !isdirectory(expand(&undodir))
            call mkdir(expand(&undodir), "p")
        endif
    endif

    if !isdirectory(expand(&backupdir))
        call mkdir(expand(&backupdir), "p")
    endif
    if !isdirectory(expand(&directory))
        call mkdir(expand(&directory), "p")
    endif

" }}}

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" All the plugins
Bundle 'scrooloose/syntastic'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/vim-powerline'
Bundle 'digitaltoad/vim-jade'
Bundle 'ervandew/supertab'
Bundle 'scrooloose/nerdtree'

" All the colorschemes.
Bundle 'sjl/badwolf'
Bundle 'YorickPeterse/Autumn.vim'
Bundle 'nanotech/jellybeans.vim'
Bundle 'tomasr/molokai'

filetype plugin indent on

" Colorscheme Settings
syntax on
set synmaxcol=800
set t_Co=256
set background=dark
colorscheme badwolf


"Indentation settings
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set smarttab

"Statusline settings"
set laststatus=2
let g:Powerline_symbols='fancy'
let g:Powerline_cache_enabled=1
" Formatting
set expandtab
set formatoptions=croqn1
silent! set formatoptions+=j
set smarttab
set nojoinspaces
set shiftround
set shiftwidth=4
set softtabstop=4
set tabstop=4


"Convenience mappings"
inoremap jj <Esc>`^
inoremap JJ <Esc>`^
inoremap jk <Esc>`^
inoremap JK <Esc>`^
cnoremap w!! %!sudo tee > /dev/null %
nnoremap J mzJ`z

"Reasonable line movement"
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

"Window movement mappings"
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k

" Matching
silent! runtime macros/matchit.vim

" Netrw
if has("eval")
    let g:netrw_silent = 1
    let g:netrw_liststyle = 3
endif

"Get rid of annoying bell sound"
set noerrorbells visualbell t_vb=

"NERDTree settings"
let NERDTreeIgnore=['\.pyc$', '\~$', '\.rbc$']
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

" Messages
set shortmess+=I

" Miscellaneous
set backspace=indent,eol,start
set modelines=0
set report=0

set number
set mouse=r

" Objects
onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

" Paste
set nopaste
set pastetoggle=<F2>

" Reading
set autoread

" Scrolling
set scrolloff=5
set sidescrolloff=16

" Search
if has("extra_search")
    set incsearch
    set ignorecase
    set smartcase
    nnoremap <leader>h :set hlsearch!<CR>
    nnoremap <leader>i :set incsearch!<CR>
    nnoremap <C-l> :nohlsearch<CR><C-l>
    if has("autocmd")
        augroup vimrc
            autocmd!
            silent! autocmd InsertEnter * set nohlsearch
            silent! autocmd InsertLeave * set hlsearch
        augroup END
    endif
endif

" Spelling
if has("spell") 
    set spelllang=en_us 
    nnoremap <leader>s :setlocal spell!<CR> 
endif


" Terminal
set ttyfast
set visualbell t_vb=

" Typos
if has("user_commands")
    command! -bang -complete=file -nargs=? E e<bang> <args>
    command! -bang -complete=file -nargs=? W w<bang> <args>
    command! -bang -complete=file -nargs=? WQ wq<bang> <args>
    command! -bang -complete=file -nargs=? Wq wq<bang> <args>
    command! -bang Q q<bang>
    command! -bang Qa qa<bang>
    command! -bang QA qa<bang>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
endif

" Unmaps
noremap <F1> <nop>
nnoremap K <nop>
nnoremap Q <nop>

" Visual
if has("virtualedit")
    set virtualedit+=block
endif

" Wildmenu
if has("wildmenu")
    set wildmenu
    set wildmode=longest:list
    if has("wildignore")
        set wildignore+=*.a,*.o
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=.DS_Store,.git,.hg,.svn
        set wildignore+=*~,*.swp,*.tmp
        set wildignore+=*.pyc
        set wildignore+=*.class
    endif
    if exists("&wildignorecase")
        set wildignorecase
    endif
endif

" Windows
if has("windows")
    set splitbelow
    if has("vertsplit")
        set splitright
    endif
    if exists("&showtabline")
        set showtabline=1
    endif
endif

" Yanking
nnoremap Y y$

" Local
if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif

if exists('+autochdir')
	set autochdir
endif

map q: <cr>

set completeopt=menuone,longest,preview

let mapleader=","
let g:Powerline_symbols = 'unicode'
let g:SuperTabDefaultCompletionType = "context"

" Leader Keybindings
nnoremap <Leader>n :NERDTreeToggle<CR>:wincmd =<CR>
